# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Setup Starship prompt, if supported and installed
case "$TERM" in
xterm*|rxvt*|alacritty)
    if [[ -x "$(command -v starship)" ]]; then 
        eval "$(starship init bash)"
    else
        PS1="\[$(tput setaf 10)\]$PS1\[$(tput sgr0)\]"
    fi ;;
*) ;;
esac

# Fzf keybindings
if [[ -f /usr/share/fzf/shell/key-bindings.bash ]]; then 
    source /usr/share/fzf/shell/key-bindings.bash
fi

# Misc shell opts
shopt -s autocd cdspell checkwinsize dotglob

# User specific aliases and functions
if [[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc" ]]; then
        source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc"
fi

conf() {
    case $1 in
        alacritty ) $EDITOR ~/.config/alacritty/alacritty.yml ;;
        bash ) $EDITOR "${XDG_CONFIG_HOME:-$HOME/.config}/shell/bashrc" ;;
        git ) $EDITOR ~/.config/git/config ;;
        i3 ) $EDITOR ~/.config/i3/config ;;
        vim ) $EDITOR ~/.config/nvim/init.vim
    esac
}

# d - shorten and conditionally upgrade privilegs to common dnf commands
# ex: "d in firefox" - same as "sudo dnf -y firefox"
d() {
    case $1 in
        install ) sudo dnf -y install $2 ;;
        remove ) sudo dnf -y remove $2 ;;
        upgrade ) sudo dnf -y upgrade $2 ;;
        search ) dnf search $2 ;;
        in ) sudo dnf -y install $2 ;;
        se ) dnf search $2 ;;
        rm ) sudo dnf -y remove $2 ;;
        up ) sudo dnf -y upgrade $2 ;;
        * ) dnf $2 ;;
    esac
}

# Use Alt-h to view manpage while editing command
bind -x '"\eh":
        FIRST_WORD=${READLINE_LINE%% *}
        if (( READLINE_POINT > ${#FIRST_WORD} )); then
                LOOKUP_CMD=${READLINE_LINE::$READLINE_POINT} #grab the string up to the cursor. e.g. "df {} | less" where {} is the cursor looks up df.
                LOOKUP_CMD=${LOOKUP_CMD##*[;|&]} #remove previous commands from the left
                LOOKUP_CMD=${LOOKUP_CMD# } #remove leading space if it exists (only a single one though)
                LOOKUP_CMD=${LOOKUP_CMD%% *} #remove arguments to the current command from the right
        else
                LOOKUP_CMD=$FIRST_WORD #if the cursor is at the beginning of the line, look up the first word
        fi
        man "$LOOKUP_CMD"'

# Automatically change the current working directory after closing ranger
# To undo the effect of this function, you can type "cd -" to return to the
# original directory.
ranger_cd() {
    temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
    ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
        cd -- "$chosen_dir"
    fi
    /usr/bin/rm -f -- "$temp_file"
}

# This binds Ctrl-O to ranger-cd:
bind '"\C-o":"ranger_cd\C-m"'
